apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

if (System.getenv("ARES_KEYSTORE_ALIAS_NAME")) {
    apply plugin: 'com.github.triplet.play'

    play {
        track = "${track}"
        jsonFile = rootProject.file('secrets/ares-play-credentials.json')
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "io.aphelion.ares"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode computeVersionCode()
        versionName computeVersionName()
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    signingConfigs {
        release {
            storeFile rootProject.file('secrets/ares-keystore.jks')
            storePassword System.getenv("ARES_KEYSTORE_PASSWORD")
            keyAlias System.getenv("ARES_KEYSTORE_ALIAS_NAME")
            keyPassword System.getenv("ARES_KEYSTORE_ALIAS_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

buildscript {
    ext.kotlin_version = '1.0.1-2'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.triplet.gradle:play-publisher:1.1.4'
    }
}

repositories {
    mavenCentral()
}

def computeVersionCode() {
    try {
        def p = Runtime.getRuntime().exec("git rev-list --all --count")
        def result = p.waitFor()
        if (result != 0) {
            return 0 // no git revisions
        }
        return p.getInputStream().readLines().get(0).toInteger()
    } catch (ignored) {
        return 0
    }
}

def computeVersionName() {
    def command = Runtime.getRuntime().exec("git rev-parse --short HEAD")
    def result = command.waitFor()
    return (result == 0) ? computeVersionCode() + "-" + command.inputStream.text.trim() : "nogit"
}

task printVersion() {
    print "\n********** APP BUILD VERSION **********\n"
    print "Version Code: " + computeVersionCode() + "\n"
    print "Version Name: " + computeVersionName() + "\n"
    print "***************************************\n\n"
}
